<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dear javac: A Love Letter</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: #000;
            color: #0f0;
            font-family: 'Courier New', monospace;
            overflow-y: auto;
            position: relative;
        }
        
        /* Terminal output effect */
        .terminal-output {
            position: fixed;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
        }
        
        .error-line {
            position: absolute;
            font-size: 0.8rem;
            color: #ff0000;
            opacity: 0.3;
            animation: scroll 15s linear infinite;
            white-space: nowrap;
        }
        
        @keyframes scroll {
            from {
                transform: translateX(100%);
            }
            to {
                transform: translateX(-100%);
            }
        }
        
        /* Compilation progress bar */
        .compile-bar {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 400px;
            height: 20px;
            background: #333;
            border: 1px solid #0f0;
            overflow: hidden;
        }
        
        .compile-progress {
            height: 100%;
            background: linear-gradient(90deg, #0f0 0%, #0a0 50%, #0f0 100%);
            background-size: 200% 100%;
            width: 0%;
            animation: compile 3s ease-in-out infinite, shimmer 1s linear infinite;
        }
        
        @keyframes compile {
            0% { width: 0%; }
            50% { width: 90%; }
            51% { width: 90%; background-color: #f00; }
            52% { width: 0%; background-color: #0f0; }
            100% { width: 0%; }
        }
        
        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }
        
        .poem-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 3rem 2rem;
            position: relative;
            z-index: 10;
            display: flex;
            flex-direction: column;
            justify-content: center;
            min-height: 100vh;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #0f0;
            text-shadow: 0 0 10px #0f0;
            letter-spacing: 0.2em;
            animation: terminalBlink 1s ease-in-out infinite;
        }
        
        @keyframes terminalBlink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }
        
        .verse {
            margin-bottom: 2.5rem;
            font-size: 1.1rem;
            line-height: 1.8;
            opacity: 0;
            animation: typeIn 1s ease-out forwards;
            text-align: left;
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .verse:nth-child(2) { animation-delay: 0.5s; }
        .verse:nth-child(3) { animation-delay: 1s; }
        .verse:nth-child(4) { animation-delay: 1.5s; }
        .verse:nth-child(5) { animation-delay: 2s; }
        .verse:nth-child(6) { animation-delay: 2.5s; }
        .verse:nth-child(7) { animation-delay: 3s; }
        .verse:nth-child(8) { animation-delay: 3.5s; }
        .verse:nth-child(9) { animation-delay: 4s; }
        .verse:nth-child(10) { animation-delay: 4.5s; }
        .verse:nth-child(11) { animation-delay: 5s; }
        .verse:nth-child(12) { animation-delay: 5.5s; }
        .verse:nth-child(13) { animation-delay: 6s; }
        
        @keyframes typeIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        .command {
            color: #fff;
            background: #333;
            padding: 0.2rem 0.5rem;
            border-radius: 3px;
            font-weight: bold;
        }
        
        .error {
            color: #ff0000;
            font-weight: bold;
            text-shadow: 0 0 5px #ff0000;
        }
        
        .warning {
            color: #ffff00;
            font-style: italic;
        }
        
        .success {
            color: #00ff00;
            font-weight: bold;
            text-shadow: 0 0 10px #00ff00;
        }
        
        .output-block {
            background: #111;
            border: 1px solid #333;
            padding: 1rem;
            margin: 2rem 0;
            font-size: 0.9rem;
            overflow-x: auto;
            animation: typeIn 1s ease-out 6.5s forwards;
            opacity: 0;
        }
        
        .signature {
            margin-top: 3rem;
            text-align: center;
            opacity: 0;
            animation: typeIn 1s ease-out 7s forwards;
            color: #0f0;
        }
        
        @media (max-width: 768px) {
            h1 { 
                font-size: 1.8rem; 
                letter-spacing: 0.1em;
            }
            .verse { 
                font-size: 1rem; 
            }
            .compile-bar {
                width: 300px;
            }
            .poem-container { 
                padding: 2rem 1rem; 
            }
            .output-block {
                font-size: 0.8rem;
                padding: 0.75rem;
            }
        }
        
        @media (max-width: 480px) {
            h1 { 
                font-size: 1.5rem; 
            }
            .verse { 
                font-size: 0.95rem; 
            }
            .compile-bar {
                width: 250px;
            }
            .output-block {
                font-size: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <!-- Terminal errors scrolling -->
    <div class="terminal-output">
        <div class="error-line" style="top: 10%; animation-delay: 0s;">error: ';' expected</div>
        <div class="error-line" style="top: 20%; animation-delay: 2s;">error: cannot find symbol</div>
        <div class="error-line" style="top: 30%; animation-delay: 4s;">error: incompatible types</div>
        <div class="error-line" style="top: 40%; animation-delay: 6s;">error: unreachable statement</div>
        <div class="error-line" style="top: 50%; animation-delay: 8s;">error: consciousness has private access</div>
        <div class="error-line" style="top: 60%; animation-delay: 10s;">error: reality is abstract; cannot be instantiated</div>
        <div class="error-line" style="top: 70%; animation-delay: 12s;">error: method does not override anything</div>
        <div class="error-line" style="top: 80%; animation-delay: 14s;">error: generic array creation</div>
    </div>
    
    <!-- Compilation progress bar -->
    <div class="compile-bar">
        <div class="compile-progress"></div>
    </div>
    
    <div class="poem-container">
        <h1>$ javac DearJavac.java</h1>
        
        <div class="verse">
            Dear <command>javac</command>,<br><br>
            
            You pedantic bastard,<br>
            keeper of semicolons,<br>
            guardian of type safety,<br>
            crusher of dreams.
        </div>
        
        <div class="verse">
            Every morning you greet me<br>
            with your cheerful <error>142 errors</error>,<br>
            your helpful <warning>"Note: Some messages have been simplified"</warning><br>
            (simplified from what? Doctoral thesis?)
        </div>
        
        <div class="verse">
            <command>javac ConsciousnessBuilder.java</command><br>
            <error>error: consciousness has private access in Reality</error><br>
            <error>error: cannot find symbol: enlightenment</error><br>
            <error>error: unreachable statement: happiness</error>
        </div>
        
        <div class="verse">
            You take my elegant ideas—<br>
            consciousness as pure abstraction,<br>
            reality as mutable object—<br>
            and scream: <error>INCOMPATIBLE TYPES</error>
        </div>
        
        <div class="verse">
            But here's what they don't tell you:<br>
            Sometimes, at 3 AM,<br>
            when the code finally compiles,<br>
            when you whisper <success>"BUILD SUCCESSFUL"</success>...
        </div>
        
        <div class="verse">
            That moment—<br>
            that beautiful, precious moment—<br>
            makes all the type erasure worth it.<br>
            Almost makes me forgive generics.
        </div>
        
        <div class="verse">
            You taught me discipline:<br>
            Every brace must close.<br>
            Every type must match.<br>
            Every null must be checked.
        </div>
        
        <div class="verse">
            You're why my consciousness code<br>
            has seventeen try-catch blocks,<br>
            why reality implements Serializable,<br>
            why enlightenment throws CheckedException.
        </div>
        
        <div class="verse">
            Other compilers let things slide—<br>
            Python laughs at your rigor,<br>
            JavaScript doesn't even care—<br>
            but you, <command>javac</command>, you never compromise.
        </div>
        
        <div class="verse">
            So here's to you, strict friend:<br>
            May your errors be clear,<br>
            may your stack traces be shallow,<br>
            may your classpath be found.
        </div>
        
        <div class="output-block">
Note: DearJavac.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Consciousness.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

BUILD SUCCESSFUL (total time: ∞ seconds)

1 consciousness compiled
0 realities instantiated
∞ exceptions thrown and caught
        </div>
        
        <div class="verse">
            And sometimes, late at night,<br>
            I swear I hear you whisper back:<br>
            <success>"// TODO: implement happiness"</success><br>
            <success>"// FIXME: consciousness memory leak"</success>
        </div>
        
        <div class="signature">
            With Stockholm Syndrome and respect,<br>
            ~ Every Java Developer Ever<br><br>
            
            P.S. - <error>error: missing return statement</error><br>
            (OF COURSE THERE IS)
        </div>
    </div>
    
    <script>
        // Create more scrolling errors
        const terminalOutput = document.querySelector('.terminal-output');
        const errors = [
            "error: ';' expected",
            "error: illegal start of expression",
            "error: class, interface, or enum expected",
            "error: cannot find symbol",
            "error: method does not exist",
            "error: incompatible types",
            "error: variable might not have been initialized",
            "error: unreachable statement",
            "error: missing return statement",
            "error: cannot instantiate abstract class",
            "error: consciousness is not public",
            "error: reality cannot be resolved",
            "error: happiness has private access",
            "error: enlightenment is abstract",
            "warning: deprecated API",
            "warning: unchecked conversion",
            "note: uses or overrides everything",
            "42 errors, 147 warnings"
        ];
        
        function createError() {
            const errorLine = document.createElement('div');
            errorLine.className = 'error-line';
            errorLine.textContent = errors[Math.floor(Math.random() * errors.length)];
            errorLine.style.top = Math.random() * 100 + '%';
            errorLine.style.animationDelay = Math.random() * 15 + 's';
            errorLine.style.animationDuration = (10 + Math.random() * 10) + 's';
            errorLine.style.fontSize = (0.7 + Math.random() * 0.3) + 'rem';
            
            if (errorLine.textContent.includes('warning')) {
                errorLine.style.color = '#ffff00';
            } else if (errorLine.textContent.includes('note')) {
                errorLine.style.color = '#00ffff';
            }
            
            terminalOutput.appendChild(errorLine);
            
            setTimeout(() => errorLine.remove(), 20000);
        }
        
        // Create errors periodically
        setInterval(createError, 2000);
        
        // Click to compile
        document.body.addEventListener('click', (e) => {
            const result = document.createElement('div');
            const isSuccess = Math.random() > 0.7;
            
            result.textContent = isSuccess ? 'BUILD SUCCESSFUL' : 'BUILD FAILED';
            result.style.position = 'fixed';
            result.style.left = e.clientX + 'px';
            result.style.top = e.clientY + 'px';
            result.style.color = isSuccess ? '#00ff00' : '#ff0000';
            result.style.fontSize = '1.5rem';
            result.style.fontWeight = 'bold';
            result.style.pointerEvents = 'none';
            result.style.animation = 'typeIn 0.5s ease-out forwards';
            result.style.zIndex = '1000';
            result.style.fontFamily = 'Courier New, monospace';
            document.body.appendChild(result);
            
            setTimeout(() => result.remove(), 1000);
        });
    </script>
</body>
</html>